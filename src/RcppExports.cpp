// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// boosterCpp
List boosterCpp(NumericMatrix x, NumericVector y, String model_name, int n_estimators, double learning_rate, double tolerance, bool calibration, int seed, bool show_progress, bool verbose);
RcppExport SEXP _tisthemachinelearner_boosterCpp(SEXP xSEXP, SEXP ySEXP, SEXP model_nameSEXP, SEXP n_estimatorsSEXP, SEXP learning_rateSEXP, SEXP toleranceSEXP, SEXP calibrationSEXP, SEXP seedSEXP, SEXP show_progressSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< String >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< int >::type n_estimators(n_estimatorsSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< bool >::type calibration(calibrationSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(boosterCpp(x, y, model_name, n_estimators, learning_rate, tolerance, calibration, seed, show_progress, verbose));
    return rcpp_result_gen;
END_RCPP
}
// predictBoosterCpp
NumericVector predictBoosterCpp(List booster, NumericMatrix x);
RcppExport SEXP _tisthemachinelearner_predictBoosterCpp(SEXP boosterSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type booster(boosterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predictBoosterCpp(booster, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tisthemachinelearner_boosterCpp", (DL_FUNC) &_tisthemachinelearner_boosterCpp, 10},
    {"_tisthemachinelearner_predictBoosterCpp", (DL_FUNC) &_tisthemachinelearner_predictBoosterCpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tisthemachinelearner(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
